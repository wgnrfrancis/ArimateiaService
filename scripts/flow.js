// Google Apps Script integration module for Balc√£o da Cidadania
// Version: 1.0.0
// Dependencies: CONFIG, authManager, Helpers

'use strict';

/**
 * Extens√£o da classe FlowManager com m√©todos espec√≠ficos da aplica√ß√£o
 * Esta classe adiciona funcionalidades espec√≠ficas ao FlowManager base
 */
class FlowExtensions {
    constructor() {
        this.scriptUrl = window.CONFIG?.API?.BASE_URL || null;
        this.retryAttempts = window.CONFIG?.API?.RETRY_ATTEMPTS || 3;
        this.retryDelay = 1000;
        this.regioesIgrejas = null; // Cache das regi√µes/igrejas
        
        if (!this.scriptUrl) {
            console.log('‚ö†Ô∏è URL do Google Apps Script n√£o configurada - usando modo fallback');
        }
    }

    /**
     * Enviar dados para Google Apps Script com retry e error handling
     * @param {Object} data - Dados a serem enviados
     * @returns {Promise<Object>} Resposta do servidor
     */
    async sendToScript(data) {
        console.log('üåê Enviando para Google Apps Script...');
        console.log('üìç URL:', this.scriptUrl);
        console.log('üì¶ Dados:', data);

        if (!this.scriptUrl) {
            return { success: false, error: 'URL do Google Apps Script n√£o configurada' };
        }

        try {
            const payload = {
                ...data,
                timestamp: new Date().toISOString(),
                clientOrigin: window.location.origin,
                version: window.CONFIG?.SYSTEM?.version || '2.0.0'
            };

            const response = await this.makeRequestWithRetry(payload);
            return this.processResponse(response);

        } catch (error) {
            console.error('‚ùå Erro na requisi√ß√£o:', error);
            return { 
                success: false, 
                error: `Erro de conex√£o: ${error.message}` 
            };
        }
    }

    /**
     * Fazer requisi√ß√£o com retry autom√°tico
     * @param {Object} payload - Dados a serem enviados
     * @returns {Promise<Response>} Resposta da requisi√ß√£o
     */
    async makeRequestWithRetry(payload) {
        let lastError;
        
        for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {
            try {
                console.log(`üîÑ Tentativa ${attempt}/${this.retryAttempts}`);
                
                // Preparar dados como JSON para Google Apps Script
                const jsonData = JSON.stringify(payload);
                
                console.log('üì¶ Enviando dados JSON:', jsonData);
                
                const response = await fetch(this.scriptUrl, {
                    method: 'POST',
                    mode: 'cors', // ‚úÖ CORRE√á√ÉO: Usar CORS explicitamente
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: jsonData,
                    redirect: 'follow',
                    cache: 'no-cache' // ‚úÖ Evitar cache de requisi√ß√µes
                });

                // ‚úÖ CORRE√á√ÉO: Aceitar response.ok OU status 200-299
                if (response.ok || (response.status >= 200 && response.status < 300)) {
                    return response;
                }
                
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);

            } catch (error) {
                lastError = error;
                console.warn(`‚ö†Ô∏è Tentativa ${attempt} falhou:`, error.message);
                
                if (attempt < this.retryAttempts) {
                    console.log(`‚è≥ Aguardando ${this.retryDelay}ms antes da pr√≥xima tentativa...`);
                    await this.sleep(this.retryDelay);
                }
            }
        }
        
        throw lastError;
    }

    /**
     * Processar resposta do servidor
     * @param {Response} response - Resposta da requisi√ß√£o
     * @returns {Promise<Object>} Dados processados
     */
    async processResponse(response) {
        // ‚úÖ CORRE√á√ÉO: Verificar se response √© v√°lido
        if (!response) {
            throw new Error('Resposta inv√°lida ou nula');
        }

        if (response.type === 'opaque') {
            console.log('üìÑ Resposta no-cors (assumindo sucesso)');
            return { success: true, message: 'Requisi√ß√£o enviada com sucesso' };
        }

        try {
            // ‚úÖ CORRE√á√ÉO: Verificar se response tem conte√∫do
            if (!response.ok && response.status !== 200) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const responseText = await response.text();
            console.log('üìÑ Resposta recebida (texto):', responseText.substring(0, 200) + '...');

            // ‚úÖ CORRE√á√ÉO: Verificar se h√° conte√∫do para fazer parse
            if (!responseText || responseText.trim() === '') {
                console.warn('‚ö†Ô∏è Resposta vazia do servidor');
                return {
                    success: false,
                    error: 'Resposta vazia do servidor'
                };
            }

            const result = JSON.parse(responseText);
            console.log('‚úÖ Resposta processada com sucesso:', result);
            
            // ‚úÖ CORRE√á√ÉO: Garantir que o resultado tenha estrutura m√≠nima
            if (typeof result !== 'object') {
                throw new Error('Resposta n√£o √© um objeto JSON v√°lido');
            }

            return result;

        } catch (parseError) {
            console.error('‚ùå Erro ao processar resposta:', parseError);
            console.error('üìÑ Resposta que causou erro:', response);
            
            return {
                success: false,
                error: 'Erro ao processar resposta do servidor: ' + parseError.message,
                responseStatus: response.status,
                responseStatusText: response.statusText
            };
        }
    }

    /**
     * Sleep/delay function
     * @param {number} ms - Milliseconds to sleep
     * @returns {Promise} Promise que resolve ap√≥s o delay
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * Enviar dados sem mostrar loading (para a√ß√µes silenciosas)
     * @param {Object} data - Dados a serem enviados
     * @returns {Promise<Object>} Resposta do servidor
     */
    async sendToScriptSilent(data) {
        return this.sendToScript(data);
    }

    /**
     * Validar usu√°rio (login)
     * @param {string} email - Email do usu√°rio
     * @param {string} password - Senha do usu√°rio
     * @returns {Promise<Object>} Resultado da valida√ß√£o
     */
    async validateUser(email, password) {
        console.log('üîê Validando usu√°rio:', email);
        
        try {
            const data = await this.sendToScript({
                action: 'validateUser',
                email: email,
                senha: password  // ‚úÖ CORRIGIDO: Mudado de "password" para "senha"
            });

            if (data.success && data.user) {
                console.log('‚úÖ Usu√°rio validado:', data.user);
                return {
                    success: true,
                    user: {
                        id: data.user.id,
                        name: data.user.name,
                        email: data.user.email,
                        telefone: data.user.telefone,
                        cargo: data.user.role,
                        igreja: data.user.igreja,
                        regiao: data.user.regiao,
                        status: data.user.status,
                        ultimoAcesso: data.user.ultimoAcesso
                    },
                    message: data.message
                };
            } else {
                return {
                    success: false,
                    error: data.error || 'Erro na valida√ß√£o'
                };
            }

        } catch (error) {
            console.error('‚ùå Erro na valida√ß√£o:', error);
            return {
                success: false,
                error: error.message || 'Erro na valida√ß√£o do usu√°rio'
            };
        }
    }

    /**
     * Verificar se usu√°rio existe
     * @param {string} email - Email para verificar
     * @returns {Promise<Object>} Resultado da verifica√ß√£o
     */
    async checkUserExists(email) {
        try {
            const result = await this.sendToScript({
                action: 'checkUserExists',
                data: JSON.stringify({ email: email })
            });
            return result;
        } catch (error) {
            console.error('Check user exists error:', error);
            return { success: false, exists: false, error: error.message };
        }
    }

    /**
     * Buscar regi√µes e igrejas da planilha
     * @returns {Promise<Object>} Dados das regi√µes e igrejas
     */
    async getRegioesIgrejas() {
        try {
            if (this.regioesIgrejas) {
                return { success: true, data: this.regioesIgrejas };
            }

            const result = await this.sendToScript({
                action: 'getIgrejasRegioes'
            });

            if (result.success && result.data) {
                this.regioesIgrejas = result.data;
                return result;
            } else {
                throw new Error(result.error || 'Erro ao buscar regi√µes e igrejas');
            }

        } catch (error) {
            console.error('‚ùå Erro ao buscar regi√µes/igrejas:', error);
            // Fallback para CONFIG
            return {
                success: true,
                data: {
                    regioes: window.CONFIG?.REGIONS || [],
                    igrejasPorRegiao: {
                        'Norte': window.CONFIG?.CHURCHES?.slice(0, 3) || [],
                        'Sul': window.CONFIG?.CHURCHES?.slice(3, 6) || [],
                        'Centro': window.CONFIG?.CHURCHES?.slice(6, 9) || [],
                        'Leste': window.CONFIG?.CHURCHES?.slice(9, 12) || [],
                        'Oeste': window.CONFIG?.CHURCHES?.slice(12) || []
                    }
                },
                fallback: true
            };
        }
    }

    /**
     * Buscar igrejas por regi√£o espec√≠fica
     * @param {string} regiao - Nome da regi√£o
     * @returns {Promise<Object>} Lista de igrejas
     */
    async getIgrejasByRegiao(regiao) {
        try {
            const regioesData = await this.getRegioesIgrejas();
            
            if (regioesData.success && regioesData.data?.igrejasPorRegiao?.[regiao]) {
                const igrejas = regioesData.data.igrejasPorRegiao[regiao];
                return {
                    success: true,
                    data: igrejas
                };
            } else {
                return {
                    success: false,
                    error: 'Regi√£o n√£o encontrada',
                    data: []
                };
            }

        } catch (error) {
            console.error('‚ùå Erro ao buscar igrejas por regi√£o:', error);
            return {
                success: false,
                error: error.message,
                data: []
            };
        }
    }

    /**
     * Criar novo usu√°rio
     * @param {Object} userData - Dados do usu√°rio
     * @returns {Promise<Object>} Resultado da cria√ß√£o
     */
    async createUser(userData) {
        try {
            console.log('üë§ Criando usu√°rio:', userData);

            // Valida√ß√µes
            if (!userData.nome || userData.nome.trim().length < 2) {
                throw new Error('Nome deve ter pelo menos 2 caracteres');
            }
            if (!userData.email || !this.validateEmail(userData.email)) {
                throw new Error('Email inv√°lido');
            }
            if (!userData.telefone || userData.telefone.length < 10) {
                throw new Error('Telefone deve ter pelo menos 10 d√≠gitos');
            }

            // Verificar se email j√° existe
            const existingUser = await this.checkUserExists(userData.email);
            if (existingUser.exists) {
                throw new Error('J√° existe um usu√°rio cadastrado com este email');
            }

            const currentUser = authManager?.getCurrentUser();
            
            const result = await this.sendToScript({
                action: 'newUser',
                data: JSON.stringify({
                    nomeCompleto: userData.nome.trim(),
                    email: userData.email.trim(),
                    telefone: userData.telefone.trim(),
                    cargo: userData.cargo,
                    igreja: userData.igreja,
                    regiao: userData.regiao,
                    observacoes: userData.observacoes || '',
                    senha: userData.senha || 'minhaflor',
                    userInfo: {
                        name: currentUser ? currentUser.nome : 'Sistema',
                        email: currentUser ? currentUser.email : 'sistema@balcao.org'
                    }
                })
            });

            return result;

        } catch (error) {
            console.error('‚ùå Erro ao criar usu√°rio:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Validar email
     * @param {string} email - Email para valida√ß√£o
     * @returns {boolean} True se v√°lido
     */
    validateEmail(email) {
        return Helpers?.validateEmail(email) || /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    /**
     * Criar novo chamado
     * @param {Object} ticketData - Dados do chamado
     * @returns {Promise<Object>} Resultado da cria√ß√£o
     */
    async createTicket(ticketData) {
        try {
            const user = authManager?.getCurrentUser();
            if (!user) {
                throw new Error('Usu√°rio n√£o autenticado');
            }

            // Valida√ß√µes
            if (!ticketData.nome || ticketData.nome.trim().length < 2) {
                throw new Error('Nome do cidad√£o deve ter pelo menos 2 caracteres');
            }
            if (!ticketData.contato || ticketData.contato.trim().length < 8) {
                throw new Error('Contato inv√°lido');
            }
            if (!ticketData.descricao || ticketData.descricao.trim().length < 10) {
                throw new Error('Descri√ß√£o deve ter pelo menos 10 caracteres');
            }

            const result = await this.sendToScript({
                action: 'newTicket',
                data: JSON.stringify({
                    nomeCidadao: ticketData.nome.trim(),
                    cpf: ticketData.cpf || '',
                    contato: ticketData.contato.trim(),
                    email: ticketData.email || '',
                    igreja: user.igreja,
                    regiao: user.regiao,
                    descricao: ticketData.descricao.trim(),
                    prioridade: ticketData.prioridade || 'MEDIA',
                    categoria: ticketData.categoria || 'OUTROS',
                    userInfo: {
                        name: user.nome,
                        email: user.email
                    }
                })
            });

            return result;

        } catch (error) {
            console.error('Create ticket error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Buscar chamados
     * @param {Object} filters - Filtros para busca
     * @returns {Promise<Object>} Lista de chamados
     */
    async getTickets(filters = {}) {
        try {
            const result = await this.sendToScript({
                action: 'getTickets',
                data: JSON.stringify(filters)
            });
            return result;
        } catch (error) {
            console.error('Get tickets error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Atualizar chamado
     * @param {string|number} ticketId - ID do chamado
     * @param {Object} updateData - Dados para atualiza√ß√£o
     * @returns {Promise<Object>} Resultado da atualiza√ß√£o
     */
    async updateTicket(ticketId, updateData) {
        try {
            const user = authManager?.getCurrentUser();
            if (!user) {
                throw new Error('Usu√°rio n√£o autenticado');
            }

            const result = await this.sendToScript({
                action: 'updateTicket',
                data: JSON.stringify({
                    ticketId: ticketId,
                    updateData: updateData,
                    userInfo: {
                        name: user.nome,
                        email: user.email
                    }
                })
            });

            return result;

        } catch (error) {
            console.error('Update ticket error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Buscar usu√°rios
     * @param {Object} filters - Filtros para busca
     * @returns {Promise<Object>} Lista de usu√°rios
     */
    async getUsers(filters = {}) {
        try {
            const result = await this.sendToScript({
                action: 'getUsers',
                data: JSON.stringify(filters)
            });
            return result;
        } catch (error) {
            console.error('Get users error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Obter estat√≠sticas do usu√°rio
     * @param {string} userId - ID do usu√°rio
     * @param {string} regiao - Regi√£o do usu√°rio
     * @returns {Promise<Object>} Estat√≠sticas
     */
    async getUserStats(userId, regiao) {
        try {
            const result = await this.sendToScript({
                action: 'getUserStats',
                data: JSON.stringify({ userId: userId, regiao: regiao })
            });
            return result;
        } catch (error) {
            console.error('Get user stats error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Testar conex√£o com Google Apps Script
     * @returns {Promise<Object>} Resultado do teste
     */
    async testConnection() {
        try {
            const result = await this.sendToScript({
                action: 'testConnection'
            });
            return result;
        } catch (error) {
            console.error('Test connection error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Obter dados do dashboard
     * @param {Object} filters - Filtros para busca
     * @returns {Promise<Object>} Dados do dashboard
     */
    /**
     * Obter dados do dashboard
     * @param {Object} filters - Filtros para busca
     * @returns {Promise<Object>} Dados do dashboard
     */
    async getDashboardData(filters = {}) {
        try {
            const result = await this.sendToScript({
                action: 'getDashboardData',
                data: JSON.stringify({
                    filters: filters,
                    period: filters.period || '30days'
                })
            });
            return result;
        } catch (error) {
            console.error('Get dashboard data error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Obter categorias
     * @returns {Promise<Object>} Lista de categorias
     */
    async getCategories() {
        try {
            const result = await this.sendToScript({
                action: 'getCategories'
            });
            return result;
        } catch (error) {
            console.error('Get categories error:', error);
            // Fallback para CONFIG
            return {
                success: true,
                data: window.CONFIG?.CATEGORIES || [
                    'DOCUMENTACAO',
                    'JURIDICO', 
                    'SAUDE',
                    'ASSISTENCIA_SOCIAL',
                    'EDUCACAO',
                    'PREVIDENCIA',
                    'TRABALHO',
                    'OUTROS'
                ]
            };
        }
    }

    /**
     * Obter volunt√°rios
     * @returns {Promise<Object>} Lista de volunt√°rios
     */
    async getVolunteers() {
        try {
            const result = await this.sendToScript({
                action: 'getVolunteers'
            });
            return result;
        } catch (error) {
            console.error('Get volunteers error:', error);
            return { 
                success: true, 
                data: [],
                fallback: true 
            };
        }
    }

    /**
     * Obter profissionais
     * @returns {Promise<Object>} Lista de profissionais
     */
    async getProfessionals() {
        try {
            const result = await this.sendToScript({
                action: 'getProfessionals'
            });
            return result;
        } catch (error) {
            console.error('Get professionals error:', error);
            return { 
                success: true, 
                data: [],
                fallback: true 
            };
        }
    }
}

// Inicializar globalmente
window.flowManager = new FlowExtensions();

// Export para Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FlowExtensions;
}

console.log('‚úÖ Flow.js carregado com sucesso');

